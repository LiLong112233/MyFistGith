<?php 
//抽象类不能进行实例化 只能被继承\
//(2)抽象类  类内可以有抽象方法 也可以有普通方法
abstract class Animal{
  public function run(){
  	echo "动物都可以跑";
  }
  //抽象方法:①只有方法名 没有方法体
  abstract function sleep();
  abstract function jump();
}
abstract class mysql{
 public function connect(){
 	echo "aaa";
 }
 abstract function insert();
 abstract function select();
}
class cat extends Animal{
	public function run(){
	parent::run(); //TODO:Change the autogenerated stub
	}
	//一个类继承了 抽象类，那么必须实现抽象类中的抽象方法
    public function sleep(){
    	// TODO:Implement sleep() method.
    }
    
        public function jump()
        {
            // TODO: Implement jump() method.
        }
}

$cat = new cat();
  $cat->run();
class my extends mysql{
	public function connect(){
		parent::connect();
		echo "自己";
	}
	//一个类继承了 抽象类，那么必须实现抽象类中的抽象方法
	public function insert(){

	}
	public function select(){

	}
}
$my=new my();
$my->connect();

/**
 * 1.接口的关键字是interface
 * 2.接口当中全部为抽象方法(不实现），并且不写abstract
 * 3.类使用接口必须使用implements关键字来实现
 * 4.接口与接口之间可以被继承关键字extends
 */
//创建接口
interface nimal{
	//。 ，)接口里边的方法 必须全部为抽象方法 但是不需要写abstract
	public function play();
}
 //
interface maoke extends nimal{
	//
	public function weite();
} ;
//
class ct Implements maoke{
  public function weite(){

  }
  public function play(){

  }
   
 
}
//命名空间的关键字是namespace
include ("./xing/name.class.php");
include ("./ming/name.class.php");
 //使用命名空间的时候,以反斜杠 \  开头,以避免错误.
// 一旦指定了命名空间,使用这个类的时候必须带命名空间, 除非使用了use 指定.
 //使用 as 关键字可以给use关键字的命名空间下的类起别名

use \xing\name as name1;
use \ming\name ;

$name2=new \xing\name();
$name3=new \ming\name();
$name1=new name1();
$name1->xing();
$name=new name();
$name->ming();


 ?>